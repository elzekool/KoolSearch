<?php
/**
 * Token
 *
 * @author Elze Kool
 * @copyright Elze Kool, Kool Software en Webdevelopment
 *
 * @package KoolSearch
 * @subpackage Query
 **/

namespace KoolSearch\Query\Tokenize;

/**
 * Token
 * 
 * A Token is a parsed piece of query string. Tokens are generated by the
 * Tokenizer and used by the Parser
 * 
 * @package KoolSearch
 * @subpackage Query
 */
class Token
{
    const TOKEN_OP_REQUIRED = 'TOKEN_OP_REQUIRED';
    const TOKEN_OP_EXCLUDE = 'TOKEN_OP_EXCLUDE';
    const TOKEN_FIELD = 'TOKEN_FIELD';
    const TOKEN_PHRASE_START = 'TOKEN_PHRASE_START';
    const TOKEN_PHRASE_END = 'TOKEN_PHRASE_END';
    const TOKEN_TERM = 'TOKEN_TERM';
    
    
    /**
     * Type
     * @var string
     */
    private $Type;
    
    /**
     * Data
     * @var string
     */
    private $Data;
    
    /**
     * Constructor
     * 
     * @param string $Type TOKEN_* type
     * @param string $Data Data
     */
    function __construct($Type, $Data = '') {
        $this->Type = $Type;
        $this->Data = $Data;
    }
    
    /**
     * Get Type
     * 
     * @return string TOKEN_* type
     */
    public function getType() {
        return $this->Type;
    }

    /**
     * Get Data
     * 
     * @return string Data
     */
    public function getData() {
        return $this->Data;
    }



    
}